import de.undercouch.gradle.tasks.download.Download
import de.undercouch.gradle.tasks.download.Verify
import java.nio.file.Files
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: "java"
apply plugin: 'maven'
apply plugin: "distribution"
apply plugin: "idea"

group "org.logstash.filters"
version "3.1.0"

sourceCompatibility = JavaVersion.VERSION_1_8

buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath group: 'org.jruby', name: 'jruby-complete', version: "1.7.26"
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    classpath 'de.undercouch:gradle-download-task:3.2.0'
  }
}

repositories {
  mavenCentral()
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}

String yamlResourceRoot = 'https://raw.githubusercontent.com/ua-parser/uap-core/88f9f2713a1a67cee5ecb4e193c3d6a9e1dd80c9'

task downloadYaml(type: Download, overwrite: false) {
  src yamlResourceRoot + '/regexes.yaml'
  dest buildDir.toPath().resolve('resources/main/regexes.yaml').toFile()
}

task downloadTestYaml(type: Download, overwrite: false) {
  src([
    yamlResourceRoot + '/test_resources/additional_os_tests.yaml',
    yamlResourceRoot + '/test_resources/firefox_user_agent_strings.yaml',
    yamlResourceRoot + '/test_resources/opera_mini_user_agent_strings.yaml',
    yamlResourceRoot + '/test_resources/pgts_browser_list.yaml',
    yamlResourceRoot + '/test_resources/pgts_browser_list-orig.yaml',
    yamlResourceRoot + '/tests/test_device.yaml',
    yamlResourceRoot + '/tests/test_os.yaml',
    yamlResourceRoot + '/tests/test_ua.yaml'
  ])
  dest buildDir.toPath().resolve('resources/test').toFile()
}

task verifyYaml(type: Verify, dependsOn: [downloadYaml, downloadTestYaml]) {
  src buildDir.toPath().resolve('resources/main/regexes.yaml').toFile()
  algorithm 'SHA1'
  checksum 'c94374599b008da51437051fb62dc7ee7fbf3fb9'
}

dependencies {
  compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
  compile group: 'org.yaml', name: 'snakeyaml', version: '1.18'
  compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
  testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
  testRuntime group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
}

test {
  dependsOn 'verifyYaml'
  minHeapSize = "256m"
  maxHeapSize = "1024m"

  testLogging {
    events = [TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED]
    showStandardStreams = true
    exceptionFormat = TestExceptionFormat.FULL
  }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
  dependsOn verifyYaml
  classifier = null
}

task vendor(dependsOn: shadowJar) << {
  String vendorPathPrefix = "vendor/jar-dependencies"
  String projectGroupPath = project.group.replaceAll('\\.', '/')
  File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
  projectJarFile.mkdirs()
  Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
}
